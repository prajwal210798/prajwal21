#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
DIFFERENT CONTROL ALGORITHIMS AND ITS PERFORMANCE ON MOBILE INVERTED PENDULUM
\end_layout

\begin_layout Date
12.1.2019
\end_layout

\begin_layout Abstract
In this project my aim is to go through the various control algorthims and
 to compare the results between optimal and roboust control algorthims.
\end_layout

\begin_layout Paragraph*
There's a huge difference.
 Optimal control seeks to optimize a performance index over a span of time,
 while robust control seek to optimize the stability and quality of the
 controller (its "robustness") given uncertainty in the plant model, feedback
 sensors, and actuators.
\end_layout

\begin_layout Standard
Optimal control assumes your model is perfect and optimizes a functional
 you provide.
 If your model is imperfect your optimal controller is not necessarily optimal!
 It is also only optimal for the specific cost functional you provide! LQ
 optimal control is ONLY truly optimal for a completely linear plant (unlikely)
 and a quadratic cost index.
 Anything else and there's no rigorous claim to optimality.
\end_layout

\begin_layout Standard
Robust control assumes your model is imperfect.
 Suppose, for instance, some parameters in your model are believed to be
 in a certain range but are not known for sure.
 An H
\begin_inset Formula $_{2}$
\end_inset

 or H
\begin_inset Formula $_{\infty}$
\end_inset

 controller will decide which control signals are admissible based on the
 level of uncertainty in the core parameters.
 For example, if you have the plant P(s)=
\begin_inset Formula $\frac{1}{s+a}$
\end_inset

 but only know a∈[b,c] for some given b and c, a robust controller will
 clamp overly aggressive control signals that would risk pushing the pole
 at −a into the right-hand plane.
\end_layout

\end_body
\end_document
